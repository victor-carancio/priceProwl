// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum CurrencyTypes {
  USD
  CLP
}

enum PlatformsTypes {
  PC
}

model User {
  id         Int      @id @default(autoincrement())
  username String? @unique
  email String @unique
  password String
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  wishList UserGameWishList[]

}

model UserGameWishList{
  id         Int      @id @default(autoincrement())
  game Game @relation(fields: [game_id], references: [id])
  game_id Int
  user User @relation(fields: [user_id], references: [id])
  user_id Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notified Boolean @default(false)

  @@unique([game_id,user_id])

}

model Game {
  id         Int      @id @default(autoincrement())
  gameName String 
  platform PlatformsTypes @default(PC)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stores StoreGame[]
  user UserGameWishList[]
  featuredIn FeaturedGameCategory[] 
}

model StoreGame {
  id Int @id @default(autoincrement())
  store String
  type String @default("Official")
  url String 
  edition String
  gamepass Boolean? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  game Game  @relation( fields: [game_id], references: [id])
  game_id Int 
  info_price StorePrice[]
  info_game InfoGame?
  featuredIn FeaturedGameCategory[] 
}

model FeatureCategory{
  id Int @id @default(autoincrement())
  name String @unique
  stores FeaturedGameCategory[] 
}
model FeaturedGameCategory{
  id Int @id @default(autoincrement())
  game Game @relation(fields:[game_id], references: [id], onDelete: Cascade)
  game_id Int
  store StoreGame @relation(fields: [store_id], references: [id], onDelete: Cascade)
  store_id Int 
  feature_category FeatureCategory @relation(fields:[feature_category_id], references: [id], onDelete: Cascade)
  feature_category_id Int
  createdAt DateTime @default(now())
}

model StorePrice {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  discount_percent  String @default("-")
  initial_price  String @default("-")
  final_price  String @default("-")
  offer_end_date DateTime?
  currency CurrencyTypes @default(CLP)
  storeGame StoreGame @relation(fields:[store_game_id],references: [id])
  store_game_id Int 

  @@unique([id,currency])
}

// model GameOnInfoGame{
//   // id Int @id @default(autoincrement())
//   game Game @relation(fields: [game_id], references: [id])
//   game_id Int
//   info_game InfoGame @relation(fields: [info_game_id], references: [id])
//   info_game_id Int
//   // store_info_game StoreInfoGame? @relation(fields:[store_info_game_id], references: [id])
//   // store_info_game_id Int?
  
//   // @@unique([game_id,info_game_id])
//   // @@unique([game_id,store_info_game_id])
//   @@id([game_id,info_game_id])
// }

model InfoGame {
  id Int @id @default(autoincrement())
  storeIdGame String
  imgStore String @default("-")
  about String? @default("-")
  description String
  release_date String
  developer String
  publisher String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  screenshots Screenshots[]
  
  genres GenreOnInfoGame[]
  categories CategoriesOnInfoGame[] 
  website String? @default("-")
  supportedLanguages String? @default("-")
  pc_requirements PcRequirements?
  ratings RatingOnInfoGame[]

  store_game StoreGame @relation(fields: [store_game_id], references: [id])
  store_game_id Int @unique
 
}

model Genres{
  id Int @id @default(autoincrement())
  genre String @unique
  info_games GenreOnInfoGame[]
}

model GenreOnInfoGame{
  genre Genres @relation(fields: [genre_id], references: [id])
  genre_id Int
  info_game InfoGame @relation(fields: [info_game_id],references: [id])
  info_game_id Int
  @@id([genre_id, info_game_id])
}
model Screenshots{
  id Int @id @default(autoincrement())
  url String
  thumbUrl String?
  info_game InfoGame @relation(fields: [info_game_id], references: [id])
  info_game_id Int
}

model Categories{
  id Int @id @default(autoincrement())
  category String @unique
  info_games CategoriesOnInfoGame[]
}

model CategoriesOnInfoGame{
  category Categories @relation(fields: [category_id], references: [id])
  category_id Int
  info_game InfoGame @relation(fields: [info_game_id],references: [id])
  info_game_id Int
  @@id([category_id, info_game_id])
}

model PcRequirements{
 id Int @id @default(autoincrement())
 minimum String @default("-")
 recommended String @default("-")
 info_game InfoGame @relation(fields: [info_game_id], references: [id])
 info_game_id Int @unique
}


model Rating{
  id Int @id @default(autoincrement())
  name String
  descriptors String
  rating String
  imageUrl String? 
  info_game_id Int?
  info_games RatingOnInfoGame[]

  @@unique([name, descriptors])

}

model RatingOnInfoGame {
// id Int @id @default(autoincrement())
infoGame InfoGame @relation(fields: [info_game_id],references: [id])
  rating Rating @relation(fields: [rating_id], references: [id])
  info_game_id Int
  rating_id Int
  
  @@unique([info_game_id, rating_id])
}





